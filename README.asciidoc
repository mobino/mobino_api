Mobino API Documentation
========================

What is Mobino
--------------

How do I get paid with Mobino
-----------------------------


The API
-------

Mobino uses a simple REST based JSON API. All requests and responses are
transfered in JSON format over HTTP.

Preparations
~~~~~~~~~~~~

Before you can start to use the Mobino API you will need to setup API keys and
secrets. These are generated automatically for you when your merchant account
is created. You can change them anytime by going to your profile page and
clicking "Create API credentials" in the Edit form of your profile.

CAUTION: As soon as you change the credentials, any applications you have that use
the old pair of credentials will stop working.

In addition, you will need to provide a callback URL that we call upon a
successful transaction. Details to be found in the section 'Callback URL'.

API Credentials
^^^^^^^^^^^^^^^

The +API key+ is used to identify you to the Mobino payment application. The
+API Secret+ is used to sign your calls to us. While the key is public and
transmitted in the clear, the secret is never published and you should keep it
guarded.

Using the Mobino Widget
~~~~~~~~~~~~~~~~~~~~~~~

The simplest way to use Mobino is by using the provided Mobino Widget.

Mobino provides you with a JavaScript widget that you can embed on the page
where a sale is being made. Here's the code you need to put where you want the
button to appear:

.Minimal sample invocation of Mobino Widget:
----
<div id="mobino">
  <script src="http://mobino.com/api/v1/mobino.js"></script>
  <script>
    Mobino.createButton({
      transaction: {
        amount: '10.00',
        merchant_id: 99,
        api_key: 'YOUR_API_KEY',
        reference_number: '70824',
        transaction_type: 'regular',
        signature: 'CALCULATED_SIGNATURE'
      }
    });
  </script>
</div>
----

.Full sample invocation of Mobino Widget:
----
<div id="mobino">
  <script src="http://mobino.com/api/v1/mobino.js"></script>
  <script>
    Mobino.createButton({
      lang: 'fr',
      country: 'CH',
      env: 'staging',
      callback: 'http://example.com/paymentCompleted.html',
      transaction: {
        amount: '2.50',
        merchant_id: 123,
        api_key: 'YOUR_API_KEY',
        reference_number: '79748',
        transaction_type: 'regular',
        signature: 'CALCULATED_SIGNATURE'
      }
    });
  </script>
</div>
----


The parameters are as follows:

[horizontal]
+env+:: Optional Parameter: Select the environment where you want to create the payment.
  'production' is the default environment.
  'staging' is a sandbox environment.
+lang+:: Optional Parameter: Select the language of the widget and popup.
  'en' selects English, the default.
  'fr' selects French.
  'de' selects German.
+country+:: Optional Parameter: Overrides the country-detection, based on GeoIP.
The Country code has to be in capitals. Currently supported:
  'UK' selects Great Britain, the default.
  'CH' selects Switzerland.
  'FR' selects France.
  'DE' selects Germany.
+callback+:: Optional Parameter: If passed a string the user will be redirected to this page
when he successfully completed his transaction. If passed a function the function is called
with +\'success\'+ when the transaction was successful and with +\'failure\'+ if the transaction
was unsuccessful. *Note:* This is only there to improve the user experience and you need to
use the server callback to verify the payment.
+transaction+:: The transaction that should be started when the user clicks on the button.
+transaction.amount+:: The amount to charge in Euro's and Cent's, formatted as a string.
Separator of Euros and Cents is a +.+ (dot), not a comma. No other formatting
is allowed (thousand separators etc.)
+transaction.merchant_id+:: Your merchant id. Will be provided to you by us.
+transaction.api_key+:: The API key found discussed above.
+transaction.reference_number+:: An 'optional' reference number that you can use to track
the payment. We will provide you this reference number in the callback we do on
a successful transaction.
+transaction.transaction_type+:: Either +regular+ or +gift+. A regular transaction is one,
where you bill your customer and get paid. A gift transaction is one where you
provide some (virtual) gift to the customer (no money is being transfered)
+transaction.signature+:: A signature of the parameters. See section on 'Signature'


Signature
~~~~~~~~~

In order to protect the integrity of your call to Mobino, you will need to
provide a computed signature. This signature is generated using a one way Hash
function using the parameters you provide and the 'API Secret' we provide to
you.

Basically, you will need to sort the parameters, convert them into a string,
append your secret and then run the Hash function on it.

We have code in some languages and will expand this as time goes by. Check out
the different subfolders to see how the parameters are handled.

Here's a step by step walk through:

.Original parameters
----
{'amount':'10.0', 'reference_number': '70824', 'merchant_id': 99, 'transaction_type': 'regular', 'api_key':'YOUR_API_KEY'} 
----

.Normalize the parameters

----
{'amount':'10.00', 'reference_number': '70824', 'merchant_id': 99, 'transaction_type': 'regular', 'api_key':'YOUR_API_KEY'} 
----

Normalization formats the amount with the following pattern: 

----
sprintf "%.2f", params['amount']
----

which formats it with two decimal digits.

.Sort parameters
----
{'amount': '10.00', 'api_key': 'YOUR_API_KEY', 'merchant_id': 99, 'reference_number': '70824', 'transaction_type': 'regular'}
----

.Stringify them
----
'amount:10.00,api_key:YOUR_API_KEY,merchant_id:99,reference_number:70824,transaction_type:regular'
----

All the parameters are stored in one string. Key / Value are separated with a
+:+ and the pairs are separated with commas.

.Prepare for signature creation
----
'amount:10.00,api_key:YOUR_API_KEY,merchant_id:99,reference_number:70824,transaction_type:regularAPI_SECRET'
----

The 'API Secret' is appended to the string. 

.Generate signature
-----
Digest::MD5.hexdigest('amount:10.00,api_key:YOUR_API_KEY,merchant_id:99,reference_number:70824,transaction_type:regularAPI_SECRET')
=> "2ca37559b8cc7a1ae3b6089c59a4d97a"
-----

This signature is then appended to the paramters:

----
{'amount': '10.00', 'api_key': 'YOUR_API_KEY', 'merchant_id': 99, 'reference_number': '70824',  'transaction_type': 'regular', 'signature' : '2ca37559b8cc7a1ae3b6089c59a4d97a'}
----

NOTE: On the receiving side, the procedure is repeated (especially the sorting
of the paramters and the formatting of the amount parameter). Therefore you can
pass the parameters in random order - the signatures will be created correctly.


Callback URL
------------

You provide us with a callback URL in the admin interface and we will call you
on the end of a transaction with the following information:

+status+:: The status of the transaction. One of 'authorized' or
'unauthorized'. If you receive 'authorized', the transaction was completed
successfully, and you will be credited the amount. If the transaction is
unauthorized, then the customer didn't approve the transaction.
+amount+:: The amount of the transaction (formatted with two decimal digits)
+reference_number+:: The reference number you passed in when you generated the
request for a transaction
+api_key+:: your API key
+signature+:: The signature for the above parameters

At the moment, the parameters are returned url-encoded. In the future, you will
be able to select either JSON or URL encoding.


Writing your own widget
-----------------------

It is of course possible to work without the mobino widget. You will need to
call our API directly. This is a two-step process. First, you need to generate
a token for your transaction. Second, you need to poll the service for the state
of the transaction.

Step 1: Retrieve a token
~~~~~~~~~~~~~~~~~~~~~~~~

Call the URL +http://merchants.mobino.com/api/v1/tokens.json+ with the following parameters:

[options="header"]
|========
| Parameter             | Description
| +amount+              | the amount of the transaction (formatted with two decimal digits)
| +merchant_id+         | your merchant id
| +api_key+             | your API key
| +reference_number+    | a reference number for that will be passed back to your server
| +transaction_type+    | the type of the transaction, either +regular+ or +gift+
| +signature+           | a signature over all above parameters as described in the section _Signature_
| +callback+ (optional) | if this parameter is passed, the JSON response will be wrapped in a function call to allow cross domain JSONP requests.
|========

The response will be a JSON object with the following field:

[options="header"]
|========
| Field         | Description
| +token+ (int) | the token
|========


.Example
----
GET /api/v1/tokens.json?amount=2.50&merchant_id=1&api_key=YOUR_KEY&reference_number=79748&transaction_type=regular&signature=CALCULATED_SINATURE

{"token":1234}
----

Step 2: Monitoring the status of a transaction
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To retrieve the status of the transaction you can call the URL +/api/v1/transactions.json+
with the following parameters:

[options="header"]
|========
| Parameter             | Description
| +reference_number+    | the reference number of the current transaction
| +merchant_id+         | your merchant id
| +token+               | the token you retrieved in step 1
| +lang+ (optional)     | the language that you want the text message to be in (can be either +en+, +fr+, +de+ or +it+ - defaults to +fr+)
| +callback+ (optional) | if this parameter is passed, the JSON response will be wrapped in a function call to allow cross domain JSONP requests.
|========

The response will be a JSON object with the following fields:

[options="header"]
|========
| Field                    | Description
| +message+ (string)       | a human readable message describing the next step
| +status+ (string)        | the transaction status, for example +"in_progress"+, +"success"+, or +"failure"+. See below for compelete list
|========

If the +status+ is +"in_progress"+ you have to call the URL again until the transaction succeeded of failed.
A good time interval between two polls is 5 seconds.

[options="header"]
|===========
| Status         | Message
| +initializing+ | Initializing...
| +in_progress+  | Your transaction is being processed. Please enter your PIN on the telephone.
| +wrong_pin     | You have entered the wrong PIN. Please try again.
| +authorizing+  | Your transaction is being authorized. 
| +authorized+   | This transaction was successfully completed.
| +expired+      | Transaction has expired. Please restart the payment process.
| +failure+      | This transaction could not be completed.
| +rejected+     | This transaction was rejected.
| +success+      | "Payment received. Your reference number for this transaction is: %{reference_number}"
| +unauthorized+ | This transaction could be not authorized.
|===========

.Example
----
GET /api/v1/transaction.json?reference_number=79748&merchant_id=YOUR_MERCHANT_ID&token=TOKEN

{
  "message": "Your transaction is being processed. Please enter your PIN on the telephone.",
  "status": "in_progress"
}
----

Optional: Return telephone number to call
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to show the buyer the local telephone number for Mobino, you can ask
Mobino for the preferred telephone number based on the buyers IP and an
optional language:

Call the URL +http://merchants.mobino.com/api/v1/preferred_phone_numbers.json+ with
the following parameters:

[options="header"]
|=======
| Parameter | Description
| +ip+      | the ip address of the buyer
| +lang+    | the default language preferred
|========

This call returns a JSON object with the following fields

[options="header"]
|=======
| Name             | Description
| country          | the country that the buyer is in
| preferred_number | Array with [country, language, phone_number]
| other_numbers    | Array with all other possible phone numbers (in same format as preferred_number
|=======

.Example
----
GET /api/v1/preferred_phone_numbers.json?ip=12.12.12.12&lang=de

{ "country": "CH",
  "preferred_number": { "country": "CH",
                        "language": "de",
                        "phone_number": "+41 43 508 05 18"},
  "other_numbers": [{ "country": "CH",
                      "language": "fr",
                      "phone_number": "+41 22 123 12 12"},
                    { "country": "DE",
                      "language": "de",
                      "phone_number": "+49 30 123 123 12"}]
}
----
